// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	GetAdminToken(ctx context.Context, in *GetAdminTokenRequest, opts ...grpc.CallOption) (*GetAdminTokenResponse, error)
	GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error)
	GetThingToken(ctx context.Context, in *GetThingTokenRequest, opts ...grpc.CallOption) (*GetThingTokenResponse, error)
	GetClaimsToken(ctx context.Context, in *GetClaimsTokenRequest, opts ...grpc.CallOption) (*GetClaimsTokenResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) GetAdminToken(ctx context.Context, in *GetAdminTokenRequest, opts ...grpc.CallOption) (*GetAdminTokenResponse, error) {
	out := new(GetAdminTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetAdminToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error) {
	out := new(GetUserTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetThingToken(ctx context.Context, in *GetThingTokenRequest, opts ...grpc.CallOption) (*GetThingTokenResponse, error) {
	out := new(GetThingTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetThingToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetClaimsToken(ctx context.Context, in *GetClaimsTokenRequest, opts ...grpc.CallOption) (*GetClaimsTokenResponse, error) {
	out := new(GetClaimsTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/GetClaimsToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	GetAdminToken(context.Context, *GetAdminTokenRequest) (*GetAdminTokenResponse, error)
	GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error)
	GetThingToken(context.Context, *GetThingTokenRequest) (*GetThingTokenResponse, error)
	GetClaimsToken(context.Context, *GetClaimsTokenRequest) (*GetClaimsTokenResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) GetAdminToken(context.Context, *GetAdminTokenRequest) (*GetAdminTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminToken not implemented")
}
func (UnimplementedAuthServer) GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedAuthServer) GetThingToken(context.Context, *GetThingTokenRequest) (*GetThingTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThingToken not implemented")
}
func (UnimplementedAuthServer) GetClaimsToken(context.Context, *GetClaimsTokenRequest) (*GetClaimsTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaimsToken not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_GetAdminToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAdminToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetAdminToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAdminToken(ctx, req.(*GetAdminTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserToken(ctx, req.(*GetUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetThingToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetThingToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetThingToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetThingToken(ctx, req.(*GetThingTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetClaimsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClaimsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetClaimsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/GetClaimsToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetClaimsToken(ctx, req.(*GetClaimsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdminToken",
			Handler:    _Auth_GetAdminToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Auth_GetUserToken_Handler,
		},
		{
			MethodName: "GetThingToken",
			Handler:    _Auth_GetThingToken_Handler,
		},
		{
			MethodName: "GetClaimsToken",
			Handler:    _Auth_GetClaimsToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
