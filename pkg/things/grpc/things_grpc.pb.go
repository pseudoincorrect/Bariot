// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package things

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThingsClient is the client API for Things service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThingsClient interface {
	GetUserOfThing(ctx context.Context, in *GetUserOfThingRequest, opts ...grpc.CallOption) (*GetUserOfThingResponse, error)
}

type thingsClient struct {
	cc grpc.ClientConnInterface
}

func NewThingsClient(cc grpc.ClientConnInterface) ThingsClient {
	return &thingsClient{cc}
}

func (c *thingsClient) GetUserOfThing(ctx context.Context, in *GetUserOfThingRequest, opts ...grpc.CallOption) (*GetUserOfThingResponse, error) {
	out := new(GetUserOfThingResponse)
	err := c.cc.Invoke(ctx, "/things.Things/GetUserOfThing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThingsServer is the server API for Things service.
// All implementations must embed UnimplementedThingsServer
// for forward compatibility
type ThingsServer interface {
	GetUserOfThing(context.Context, *GetUserOfThingRequest) (*GetUserOfThingResponse, error)
	mustEmbedUnimplementedThingsServer()
}

// UnimplementedThingsServer must be embedded to have forward compatible implementations.
type UnimplementedThingsServer struct {
}

func (UnimplementedThingsServer) GetUserOfThing(context.Context, *GetUserOfThingRequest) (*GetUserOfThingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOfThing not implemented")
}
func (UnimplementedThingsServer) mustEmbedUnimplementedThingsServer() {}

// UnsafeThingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThingsServer will
// result in compilation errors.
type UnsafeThingsServer interface {
	mustEmbedUnimplementedThingsServer()
}

func RegisterThingsServer(s grpc.ServiceRegistrar, srv ThingsServer) {
	s.RegisterService(&Things_ServiceDesc, srv)
}

func _Things_GetUserOfThing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOfThingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingsServer).GetUserOfThing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/things.Things/GetUserOfThing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingsServer).GetUserOfThing(ctx, req.(*GetUserOfThingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Things_ServiceDesc is the grpc.ServiceDesc for Things service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Things_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "things.Things",
	HandlerType: (*ThingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserOfThing",
			Handler:    _Things_GetUserOfThing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "things.proto",
}
