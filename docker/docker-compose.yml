version: "3"

volumes:
  bariot_things_db_data:
  bariot_users_db_data:
  bariot_emqx_license:
  bariot_emqx_data:
  bariot_emqx_etc:
  bariot_emqx_log:
  bariot_nats_conf:
  bariot_influxdb_data:
  bariot_influxdb_etc:

services:

  users:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        SVC: users
    image: bariot_users_service:latest
    depends_on:
      - users_db
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      HTTP_PORT: 8080
      RPC_AUTH_HOST: auth
      RPC_AUTH_PORT: ${USER_RPC_AUTH_PORT}
      PG_HOST: users_db
      PG_PORT: 5432
      PG_DATABASE: ${USERS_DB_NAME}
      PG_USER: ${USERS_DB_USERNAME}
      PG_PASSWORD: ${USERS_DB_PASSWORD}
      PG_CONNECT_TIMEOUT: 5
      ADMIN_EMAIL: ${USER_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${USER_ADMIN_PASSWORD}
    ports:
      - 8082:8080

  users_db:
    image: postgres:14-alpine
    restart: always
    volumes:
      - bariot_users_db_data:/var/lib/postgresql/data
      - ./users_db_init:/docker-entrypoint-initdb.d
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      POSTGRES_DB: ${USERS_DB_NAME}
      POSTGRES_USER: ${USERS_DB_USERNAME}
      POSTGRES_PASSWORD: ${USERS_DB_PASSWORD}

  things:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        SVC: things
    image: bariot_things_service:latest
    depends_on:
      - things_db
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      HTTP_PORT: 8080
      RPC_AUTH_HOST: auth
      RPC_AUTH_PORT: ${THINGS_RPC_AUTH_PORT}
      MQTT_HOST: emqx
      MQTT_PORT: 1883
      MQTT_STATUS_PORT: 8081
      PG_HOST: things_db
      PG_PORT: 5432
      PG_DATABASE: ${THINGS_DB_NAME}
      PG_USER: ${THINGS_DB_USERNAME}
      PG_PASSWORD: ${THINGS_DB_PASSWORD}
      PG_CONNECT_TIMEOUT: 5
    ports:
      - 8083:8080

  things_db:
    image: postgres:14-alpine
    restart: always
    volumes:
      - bariot_things_db_data:/var/lib/postgresql/data
      - ./things_db_init:/docker-entrypoint-initdb.d
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      POSTGRES_DB: ${THINGS_DB_NAME}
      POSTGRES_USER: ${THINGS_DB_USERNAME}
      POSTGRES_PASSWORD: ${THINGS_DB_PASSWORD}
  
  auth:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        SVC: auth
    image: bariot_auth_service:latest
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      RPC_HOST: ${RPC_HOST}
      RPC_PORT: ${RPC_PORT}
      ADMIN_SECRET: ${ADMIN_SECRET}
      JWT_SECRET: ${JWT_SECRET}

  mqtt:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        SVC: mqtt
    image: bariot_mqtt_service:latest
    depends_on:
      - emqx
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_HEALTH_PORT: ${MQTT_HEALTH_PORT}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASS: ${MQTT_PASS}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}

  emqx:
    image: emqx/emqx:4.3.11
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      EMQX_NAME: emqx
      EMQX_HOST: 127.0.0.1
      EMQX_CLUSTER__DISCOVERY: static
      EMQX_CLUSTER__STATIC__SEEDS: emqx@emqx.broker.io
      EMQX_ZONE__EXTERNAL__RETRY_INTERVAL: 2s
      EMQX_MQTT__MAX_TOPIC_ALIAS: 10
    volumes:
      - bariot_emqx_license:/opt/emqx/etc/emqx.lic
      - bariot_emqx_data:/opt/emqx/data
      - bariot_emqx_etc:/opt/emqx/etc
      - bariot_emqx_log:/opt/emqx/log
    healthcheck:
      test: [ "CMD", "/opt/emqx/bin/emqx_ctl", "status" ]
      interval: 5s
      timeout: 25s
      retries: 5
    ports:
      - 1883:1883   # MQTT
      - 8883:8883   # MQTT over TLS
      - 8084:8081   # Health check
      - 18083:18083 # Management

  influxdb_db:
    image: influxdb:2.1.1
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      INFLUXDB_INIT_MODE: setup
      INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_HOST: ${INFLUXDB_HOST}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
    volumes:
      - bariot_influxdb_data:/var/lib/influxdb2
      - bariot_influxdb_etc:/etc/influxdb2
    ports:
    - "8086:8086"

  influxdb:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        SVC: influxdb
    image: bariot_influxdb_service:latest
    depends_on:
      - influxdb_db
      - nats
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_HOST: ${INFLUXDB_HOST}
      INFLUXDB_PORT: ${INFLUXDB_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}

  nats:
    image: nats:2.7-alpine
    environment:
      BARIOT_ENV: ${BARIOT_ENV}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
    volumes:
      - bariot_nats_conf:/etc/nats
    ports:
    - "4222:4222"
    - "8222:8222"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080